go:trial_factor + correct:trial_factor,
data = roidat)
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ lick_factor + trial_factor +
go:trial_factor + correct:trial_factor,
data = roidat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
full.mode..
full.model
summary(full.model)
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
dat$trial_factor <- as.factor(dat$trial_factor)
dat$lick_factor <- as.factor(dat$lick_factor)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ lick_factor + trial_factor +
go:trial_factor + correct:trial_factor,
data = roidat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
roi <- rois[[9]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
lmtest::dwtest(full.model,tol = 1e-10)
lmtest::dwtest(full.model,tol = 1e-20)
lmtest::dwtest(full.model,tol = 0)
full.model
summary(full.model)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999])
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
summary(full.model)
lmtest::dwtest(full.model,tol = 0)
lmtest::dwtest(lm.with.licking.subtraction)
a<- lmtest::dwtest(full.model,tol = 0)
b<- lmtest::dwtest(lm.with.licking.subtraction)
a$statistic
n <- length(rois)
full.model.pvals <- numeric(n)
full.model.stats <- numeric(n)
full.model.rsqds <- numeric(n)
collapsed.model.pvals <- numeric(n)
collapsed.model.stats <- numeric(n)
collapsed.model.rsqds <- numeric(n)
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(lm.with.licking.subtraction)
collapsed.model.pvals[i] <- full.model.test$p.value
collapsed.model.stats[i] <- full.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
collapsed.model<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(lm.with.licking.subtraction)
collapsed.model.pvals[i] <- full.model.test$p.value
collapsed.model.stats[i] <- full.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
collapsed.model.tests
collapsed.model.pvals
summary(collapsed.model.pvals)
hist(collapsed.model.pvals, breaks = 20)
hist(full.model.pvals, breaks = 20)
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
collapsed.model<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(lm.with.licking.subtraction)
collapsed.model.pvals[i] <- collapsed.model.test$p.value
collapsed.model.stats[i] <- collapsed.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
hist(collapsed.model.pvals, breaks = 20)
hist(collapsed.model.pvals)
collapsed.model.pvals
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
collapsed.model<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(collapsed.model)
collapsed.model.pvals[i] <- collapsed.model.test$p.value
collapsed.model.stats[i] <- collapsed.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
hist(collapsed.model.pvals)
hist(collapsed.model.stats)
hist(full.model.stats)
summary(full.model)
plot(full.model$fitted.values)
summary(full.model$fitted.values)
summary(full.model)
anova(full.model)
collapsed.model.rsqds
hist(collapsed.model.rsqds)
hist(full.model.rsqds)
plot(collapsed.model)
plot(full.model)
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average_figuregen.R')
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average_figuregen.R')
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average_figuregen.R')
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average_figuregen.R')
licking_coefs[[1]]
class(licking_coefs[[1]])
rbind(licking_coefs)
data.frame(licking_coefs)
data.frame(licking_coefs[1:2])
data.frame(t(licking_coefs[1:2])
)
str(data.frame(t(licking_coefs[1:2]))
)
data.frame(as.list(licking_coeffs[1]))
data.frame(as.list(licking_coefs[1]))
ls.of.df <- lapply(licking_coefs[1:2],FUN=function(x) data.frame(as.list(x)))
do.call('rbind',ls.of.df)
str(do.call('rbind',ls.of.df))
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average_figuregen.R')
#Now construct a dataframe of all the relevant statistics for each ROI
model_pvals     <- p.adjust(model_pvals, method = "fdr")                 #Overall model significance
rsquareds       <- lapply(summary_objects, function(x) x$adj.r.squared)  #Overall adjusted R squared
coeffs          <- lapply(summary_objects, function(x) x$coefficients)
coeff_estimates <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))     #Coefficient Estimates
coeff_pvals     <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Pr(>|t|)"])))
coeff_pvals_a   <- data.frame(lapply(coeff_pvals, FUN=function(x) p.adjust(x,method='fdr'))) #Coefficient pvalues
licking.coefs   <- lapply(licking_summaries, function(x) x$coefficients)
licking_estimates <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Estimate"])))     #Coefficient Estimates
licking_pvals     <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Pr(>|t|)"])))
#Name each column something sensible
colnames(coeff_pvals_a)   <- sapply(colnames(coeff_pvals_a),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(coeff_estimates) <- sapply(colnames(coeff_estimates),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
colnames(licking_estimates)   <- sapply(colnames(licking_estimates),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(licking_pvals)       <- sapply(colnames(licking_estimates),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
anova_frame_pvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) p.adjust(x$`Pr(>F)`,method='fdr')))))   #ANOVA p-values for each var
anova_frame_fvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`F value`))))  #ANOVA f-values
#Finally, partial eta-squareds as a measure of effect size on ANOVA:
anova_frame_etas  <- data.frame(t(rbind(sapply(anovas,FUN=function(x) effectsize::eta_squared(x)$Eta_Sq_partial))))
colnames(anova_frame_pvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"pvalue",sep=" "))
colnames(anova_frame_fvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"fvalue",sep=" "))
colnames(anova_frame_etas)  <- sapply(effectsize::eta_squared(anovas[[1]])$Parameter,
FUN=function(x) paste('ANOVA',x,"partial_eta2",sep=" "))
#Drop the residuals columns from the ANOVA output matrix
anova_frame_pvals <- anova_frame_pvals[,1:num_of_free_variables]
anova_frame_fvals <- anova_frame_fvals[,1:num_of_free_variables]
#Glue everything together and dump to CSV
output_frame <- cbind(anova_frame_pvals,anova_frame_fvals, anova_frame_etas, coeff_pvals_a,coeff_estimates)
output_frame$`licking.model pvalue`       <- licking_model_pvalues
output_frame$`overall.model.adj.rsquared` <- unlist(rsquareds)
anovas
summary_objects
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average_figuregen.R')
#Construct vectors to hold the results for each ROI
rois <- unique(dat$ROI_ID)
licking_model_pvalues <- numeric(length(rois))
summary_objects       <- vector(mode = "list", length= length(rois))
model_pvals           <- numeric(length(rois))
anovas                <- vector(mode = "list", length = length(rois))
licking_summaries     <- vector(mode = 'list', length = length(rois))
licking_pvals         <- numeric(length(rois))
#For each ROI/bouton in the dataset...
for(i in 1:length(rois)){
roi     <- rois[i]
subset  <- dat[dat$ROI_ID==roi,]
minimum <- min(subset$dF_on_F)
subset$logged_df <- log_transform(subset$dF_on_F)
#Get the timepoints when a trial is not occuring
outside_trials  <- subset[subset$trial_factor== -999,]
#Fit a licking kernel on those timepoints
licking.model <- lm(logged_df ~ as.factor(lick_factor),
data = outside_trials)
#If the kernel explains a significant amount of variance,
#subtract that kernel everytime there's a lick. Otherwise
#just subtract the mean value outside trials (ie the intercept).
licking_coefs[[i]] <- summary(licking.model)
licking_pvals[i]  <-get_lm_pvalue(licking.model)
if(licking_pvals[i]>0.05){
licking_model <- lm(logged_df ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = subset)
residual.dat <- subset
residual.dat$dF_on_F <- subset$dF_on_F - inverse_log_transform(licking.prediction,
minimum)
#Now that the effect of licking has been subtracted off if present,
#collapse each trial into 3 bins, averaging across time.
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
#Fit a linear model to predict the average fluorescence in each bin
if(contrast_varying && side_varying){
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:side
+trial.segment:correct:contrast,
data = collapsed.after.licking.subtraction)
}else if(side_varying){
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:side,
data = collapsed.after.licking.subtraction)
}else{
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go,
data = collapsed.after.licking.subtraction)
}
summary_objects[[i]] <- summary(lm.with.licking.subtraction)
anovas[[i]] <- anova(lm.with.licking.subtraction)
model_pvals[[i]] <- get_lm_pvalue(lm.with.licking.subtraction)
}
#Now construct a dataframe of all the relevant statistics for each ROI
model_pvals     <- p.adjust(model_pvals, method = "fdr")                 #Overall model significance
rsquareds       <- lapply(summary_objects, function(x) x$adj.r.squared)  #Overall adjusted R squared
coeffs          <- lapply(summary_objects, function(x) x$coefficients)
coeff_estimates <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))     #Coefficient Estimates
coeff_pvals     <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Pr(>|t|)"])))
coeff_pvals_a   <- data.frame(lapply(coeff_pvals, FUN=function(x) p.adjust(x,method='fdr'))) #Coefficient pvalues
licking.coefs   <- lapply(licking_summaries, function(x) x$coefficients)
licking_estimates <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Estimate"])))     #Coefficient Estimates
licking_pvals     <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Pr(>|t|)"])))
#Name each column something sensible
colnames(coeff_pvals_a)   <- sapply(colnames(coeff_pvals_a),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(coeff_estimates) <- sapply(colnames(coeff_estimates),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
colnames(licking_estimates)   <- sapply(colnames(licking_estimates),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(licking_pvals)       <- sapply(colnames(licking_estimates),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
anova_frame_pvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) p.adjust(x$`Pr(>F)`,method='fdr')))))   #ANOVA p-values for each var
anova_frame_fvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`F value`))))  #ANOVA f-values
#Finally, partial eta-squareds as a measure of effect size on ANOVA:
anova_frame_etas  <- data.frame(t(rbind(sapply(anovas,FUN=function(x) effectsize::eta_squared(x)$Eta_Sq_partial))))
colnames(anova_frame_pvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"pvalue",sep=" "))
colnames(anova_frame_fvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"fvalue",sep=" "))
colnames(anova_frame_etas)  <- sapply(effectsize::eta_squared(anovas[[1]])$Parameter,
FUN=function(x) paste('ANOVA',x,"partial_eta2",sep=" "))
#Drop the residuals columns from the ANOVA output matrix
anova_frame_pvals <- anova_frame_pvals[,1:num_of_free_variables]
anova_frame_fvals <- anova_frame_fvals[,1:num_of_free_variables]
#Glue everything together and dump to CSV
output_frame <- cbind(anova_frame_pvals,anova_frame_fvals, anova_frame_etas, coeff_pvals_a,coeff_estimates)
output_frame$`licking.model pvalue`       <- licking_model_pvalues
output_frame$`overall.model.adj.rsquared` <- unlist(rsquareds)
output_frame <- cbind(anova_frame_pvals,anova_frame_fvals, anova_frame_etas, coeff_pvals_a,coeff_estimates, licking_estimates,licking_pvals)
output_frame$`licking.model pvalue`       <- licking_model_pvalues
output_frame$`overall.model.adj.rsquared` <- unlist(rsquareds)
licking_estimates
model_pvals
licking.coefs
for(i in 1:length(rois)){
roi     <- rois[i]
subset  <- dat[dat$ROI_ID==roi,]
minimum <- min(subset$dF_on_F)
subset$logged_df <- log_transform(subset$dF_on_F)
#Get the timepoints when a trial is not occuring
outside_trials  <- subset[subset$trial_factor== -999,]
#Fit a licking kernel on those timepoints
licking.model <- lm(logged_df ~ as.factor(lick_factor),
data = outside_trials)
#If the kernel explains a significant amount of variance,
#subtract that kernel everytime there's a lick. Otherwise
#just subtract the mean value outside trials (ie the intercept).
licking_summaries[[i]] <- summary(licking.model)
licking_pvals[i]  <-get_lm_pvalue(licking.model)
if(licking_pvals[i]>0.05){
licking_model <- lm(logged_df ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = subset)
residual.dat <- subset
residual.dat$dF_on_F <- subset$dF_on_F - inverse_log_transform(licking.prediction,
minimum)
#Now that the effect of licking has been subtracted off if present,
#collapse each trial into 3 bins, averaging across time.
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
#Fit a linear model to predict the average fluorescence in each bin
if(contrast_varying && side_varying){
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:side
+trial.segment:correct:contrast,
data = collapsed.after.licking.subtraction)
}else if(side_varying){
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:side,
data = collapsed.after.licking.subtraction)
}else{
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go,
data = collapsed.after.licking.subtraction)
}
summary_objects[[i]] <- summary(lm.with.licking.subtraction)
anovas[[i]] <- anova(lm.with.licking.subtraction)
model_pvals[[i]] <- get_lm_pvalue(lm.with.licking.subtraction)
}
#Now construct a dataframe of all the relevant statistics for each ROI
model_pvals     <- p.adjust(model_pvals, method = "fdr")                 #Overall model significance
rsquareds       <- lapply(summary_objects, function(x) x$adj.r.squared)  #Overall adjusted R squared
coeffs          <- lapply(summary_objects, function(x) x$coefficients)
coeff_estimates <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))     #Coefficient Estimates
coeff_pvals     <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Pr(>|t|)"])))
coeff_pvals_a   <- data.frame(lapply(coeff_pvals, FUN=function(x) p.adjust(x,method='fdr'))) #Coefficient pvalues
licking.coefs   <- lapply(licking_summaries, function(x) x$coefficients)
licking_estimates <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Estimate"])))     #Coefficient Estimates
licking_pvals     <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Pr(>|t|)"])))
#Name each column something sensible
colnames(coeff_pvals_a)   <- sapply(colnames(coeff_pvals_a),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(coeff_estimates) <- sapply(colnames(coeff_estimates),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
colnames(licking_estimates)   <- sapply(colnames(licking_estimates),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(licking_pvals)       <- sapply(colnames(licking_estimates),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
anova_frame_pvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) p.adjust(x$`Pr(>F)`,method='fdr')))))   #ANOVA p-values for each var
anova_frame_fvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`F value`))))  #ANOVA f-values
#Finally, partial eta-squareds as a measure of effect size on ANOVA:
anova_frame_etas  <- data.frame(t(rbind(sapply(anovas,FUN=function(x) effectsize::eta_squared(x)$Eta_Sq_partial))))
colnames(anova_frame_pvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"pvalue",sep=" "))
colnames(anova_frame_fvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"fvalue",sep=" "))
colnames(anova_frame_etas)  <- sapply(effectsize::eta_squared(anovas[[1]])$Parameter,
FUN=function(x) paste('ANOVA',x,"partial_eta2",sep=" "))
#Drop the residuals columns from the ANOVA output matrix
anova_frame_pvals <- anova_frame_pvals[,1:num_of_free_variables]
anova_frame_fvals <- anova_frame_fvals[,1:num_of_free_variables]
#Glue everything together and dump to CSV
output_frame <- cbind(anova_frame_pvals,anova_frame_fvals, anova_frame_etas, coeff_pvals_a,coeff_estimates, licking_estimates,licking_pvals)
output_frame$`licking.model pvalue`       <- licking_model_pvalues
output_frame$`collapsed.model pvalue`     <- model_pvals
output_frame$`overall.model.adj.rsquared` <- unlist(rsquareds)
output_frame
licking_pvals
#Now construct a dataframe of all the relevant statistics for each ROI
model_pvals     <- p.adjust(model_pvals, method = "fdr")                 #Overall model significance
rsquareds       <- lapply(summary_objects, function(x) x$adj.r.squared)  #Overall adjusted R squared
coeffs          <- lapply(summary_objects, function(x) x$coefficients)
coeff_estimates <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))     #Coefficient Estimates
coeff_pvals     <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Pr(>|t|)"])))
coeff_pvals_a   <- data.frame(lapply(coeff_pvals, FUN=function(x) p.adjust(x,method='fdr'))) #Coefficient pvalues
licking.coefs   <- lapply(licking_summaries, function(x) x$coefficients)
licking_estimates <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Estimate"])))     #Coefficient Estimates
licking_pvals     <- data.frame(do.call(rbind, lapply(licking.coefs,function(x) x[,"Pr(>|t|)"])))
#Name each column something sensible
colnames(coeff_pvals_a)   <- sapply(colnames(coeff_pvals_a),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(coeff_estimates) <- sapply(colnames(coeff_estimates),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
colnames(licking_estimates)   <- sapply(colnames(licking_estimates),FUN=function(x) paste('coefficient',x,"pvalue",sep=" "))
colnames(licking_pvals)       <- sapply(colnames(licking_pvals),FUN=function(x) paste('coefficient',x,"estimate",sep=" "))
anova_frame_pvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) p.adjust(x$`Pr(>F)`,method='fdr')))))   #ANOVA p-values for each var
anova_frame_fvals <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`F value`))))  #ANOVA f-values
#Finally, partial eta-squareds as a measure of effect size on ANOVA:
anova_frame_etas  <- data.frame(t(rbind(sapply(anovas,FUN=function(x) effectsize::eta_squared(x)$Eta_Sq_partial))))
colnames(anova_frame_pvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"pvalue",sep=" "))
colnames(anova_frame_fvals) <- sapply(row.names(anovas[[1]]),FUN=function(x) paste('ANOVA',x,"fvalue",sep=" "))
colnames(anova_frame_etas)  <- sapply(effectsize::eta_squared(anovas[[1]])$Parameter,
FUN=function(x) paste('ANOVA',x,"partial_eta2",sep=" "))
#Drop the residuals columns from the ANOVA output matrix
anova_frame_pvals <- anova_frame_pvals[,1:num_of_free_variables]
anova_frame_fvals <- anova_frame_fvals[,1:num_of_free_variables]
#Glue everything together and dump to CSV
output_frame <- cbind(anova_frame_pvals,anova_frame_fvals, anova_frame_etas, coeff_pvals_a,coeff_estimates, licking_estimates,licking_pvals)
output_frame$`licking.model pvalue`       <- licking_model_pvalues
output_frame$`collapsed.model pvalue`     <- model_pvals
output_frame$`overall.model.adj.rsquared` <- unlist(rsquareds)
output_frame
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
left_only_results <- analyse_and_produce_csv_of_results(source_file_left_only,
"results_left_only.csv")
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
str(left_only_results)
left_only_results$`lick.coefficient as.factor.lick_factor.4 pvalue`
lm(left_only_results$`ANOVA trial.segment fvalue`~1)
ptukey
