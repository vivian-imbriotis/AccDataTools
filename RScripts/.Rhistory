if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = dat)
dat$residuals <- dat$dF_on_F - licking.prediction
residual.dat <- dat
residual.dat$dF_on_F <- dat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go,
data = collapsed.after.licking.subtraction)
summary_objects[[i]] <- summary(lm.with.licking.subtraction)
model_pvals[[i]] <- get_lm_pvalue(lm.with.licking.subtraction)
}
warnings()
model_pvals
summary_objects
summary_objects[[1]]$adj.r.squared
attributes(summary_objects[[1]])
lapply(summary_objects, function(x) x$adj.r.squared)
summary(lapply(summary_objects, function(x) x$adj.r.squared))
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
model_pvals
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
pvals
model_pvals
model_pvals<0.05
model_pvals <- p.adjust(model_pvals, method = "fdr")
model_pvals<0.05
coeffs
coeffs[[1]]
coeffs[model_pvals<0.05]
summary(coeffs[model_pvals<0.05])
do.call(rbind, coeffs)
summary(do.call(rbind, coeffs))
data.frame(do.call(rbind, coeffs))
summary(data.frame(do.call(rbind, coeffs)))
str(data.frame(do.call(rbind, coeffs)))
str(data.frame(do.call(rbind, lapply(coeffs,function(x) x$Estimate)))
)
coeffs[0]
coeffs[1]
coeffs[1]$Estimate
class(coeffs[[1]])
coeffs[[1]][,Estimate]
coeffs[[1]][,"Estimate"]
str(data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))
)
estimates <- (data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))
)
summary(estimates)
coeffs[[1]]
rsquareds       <- lapply(summary_objects, function(x) x$adj.r.squared)
coeffs          <- lapply(summary_objects, function(x) x$coefficients)
coeff_estimates <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))
coeff_pvals     <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Pr(>|t|)"])))
coeff_pvals
summary(coeff_estimates)
summary(coeff_pvals)
estimates
summary(estimates)
subset$residuals <- subset$dF_on_F - licking.prediction
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
warnings()
coeff_pvals
summary(coeff_pvals<0.05)
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
anovas
anovas[[1]]
anovas[[1]]$`Pr(>F)`
rbind(lapply(annvas,function(x) x$`Pr(>F)`))
rbind(lapply(anovas,function(x) x$`Pr(>F)`))
data.frame(rbind(lapply(anovas,function(x) x$`Pr(>F)`)))
str(data.frame(rbind(lapply(anovas,function(x) x$`Pr(>F)`))))
str(data.frame(rbind(apply(anovas,function(x) x$`Pr(>F)`))))
str(data.frame(rbind(apply(anovas,FUN=function(x) x$`Pr(>F)`))))
str(data.frame(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
data.frame(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`)))
data.frame(transpose(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))<0.05
summary(data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))<0.05)
a <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))<0.05
anovas[[1]]
row.names(anovas[[1]])
columns(a) <- row.names(anovas[[1]])
colnames(a) <- row.names(anovas[[1]])
a
summary(a)
summary(a[a$trial.segment:correct])
a
class(a)
data.frame(a)
class(data.frame(a))
a <- data.frame(a)
summary(a[a$trial.segment:correct])
summary(a[a$`trial.segment:correct``])
`)`
summary(a[a$`trial.segment:correct`])
summary(a[a$`trial.segment:correct`==T])
(a[a$`trial.segment:correct`==T])
(a[a$`trial.segment:correct`==T,])
anova_frame <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
colnames(anova_frame) <- row.names(anovas[[1]])
anova_frame
class(anova_frame)
anova_frame[anova_frame$`trial.segment:correct`==True,
]
anova_frame[anova_frame$`trial.segment:correct`==TRUE,]
anova_frame[anova_frame$`trial.segment:correct`,]
anova_frame[anova_frame$`trial.segment:go`,]
anova_frame
summary(anova_frame)
anova_frame <- anova_frame < 0.05
anova_frame
anova_frame <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
colnames(anova_frame) <- row.names(anovas[[1]])
summary(anova_frame[anova_frame$`trial.segment:go`<0.05]<0.05)
summary(anova_frame[anova_frame$`trial.segment:go`<0.05,]<0.05)
anova_frame[anova_frame$`trial.segment:go`<0.05 & anova_frame$`trial.segment:correct`<0.05,]
row.names(anova_frame[anova_frame$`trial.segment:go`<0.05 & anova_frame$`trial.segment:correct`<0.05,])
get_lm_pvalue(lm.with.licking.subtraction)
source('C:/Users/Vivian Imbriotis/Anaconda3/Lib/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
class(subset)
lm(df~trial_factor, data=subset)
str(subset)
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
subset <- dat[dat$ROI_ID==roi,]
outside_trials  <- subset[subset$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = subset)
subset$residuals <- subset$dF_on_F - licking.prediction
residual.dat <- subset
residual.dat$dF_on_F <- subset$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(df~trial_factor + trial_factor:side + trial_factor:correct +
trial_factor:go + lick_factor, data = subset)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
dat <- read.csv("C:/Users/viviani/Desktop/test.csv")
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
subset_dat <- dat[dat$ROI_ID==roi,]
outside_trials  <- subset_dat[subset_dat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = subset_dat)
subset_dat$residuals <- subset_dat$dF_on_F - licking.prediction
residual.dat <- subset_dat
residual.dat$dF_on_F <- subset_dat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(df~trial_factor + trial_factor:side + trial_factor:correct +
trial_factor:go + lick_factor, data = subset_dat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
subset_data
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
subset_dat <- dat[dat$ROI_ID==roi,]
outside_trials  <- subset_dat[subset_dat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = subset_dat)
subset_dat$residuals <- subset_dat$dF_on_F - licking.prediction
residual.dat <- subset_dat
residual.dat$dF_on_F <- subset_dat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(df~trial_factor + trial_factor:side + trial_factor:correct +
trial_factor:go + lick_factor, data = subset_dat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
model <- lm(dF_on_F ~ lickfactor + trial_time +
go:trial_time + correct:trial_time +
sidefactor:trial_time,
data = roidat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
model <- lm(dF_on_F ~ lick_factor + trial_time +
go:trial_time + correct:trial_time +
side:trial_time,
data = roidat)
model <- lm(dF_on_F ~ lick_factor + trial_factor +
go:trial_time + correct:trial_factor +
side:trial_factor,
data = roidat)
model <- lm(dF_on_F ~ lick_factor + trial_factor +
go:trial_factor + correct:trial_factor +
side:trial_factor,
data = roidat)
model <- lm(dF_on_F ~ lick_factor + trial_factor +
go:trial_factor + correct:trial_factor,
data = roidat)
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ lick_factor + trial_factor +
go:trial_factor + correct:trial_factor,
data = roidat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
full.mode..
full.model
summary(full.model)
dat$correct <- as.factor(dat$correct)
dat$go <- as.factor(dat$go)
dat$trial_factor <- as.factor(dat$trial_factor)
dat$lick_factor <- as.factor(dat$lick_factor)
rois <- unique(dat$ROI_ID)
licking_model_pvalues = numeric(length(rois))
licking_significant = 0
licking_insignificant = 0
summary_objects = vector(mode = "list", length= length(rois))
roi <- rois[[6]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ lick_factor + trial_factor +
go:trial_factor + correct:trial_factor,
data = roidat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
roi <- rois[[9]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat)
lmtest::dwtest(full.model)
lmtest::dwtest(lm.with.licking.subtraction)
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
lmtest::dwtest(full.model,tol = 1e-10)
lmtest::dwtest(full.model,tol = 1e-20)
lmtest::dwtest(full.model,tol = 0)
full.model
summary(full.model)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999])
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
summary(full.model)
lmtest::dwtest(full.model,tol = 0)
lmtest::dwtest(lm.with.licking.subtraction)
a<- lmtest::dwtest(full.model,tol = 0)
b<- lmtest::dwtest(lm.with.licking.subtraction)
a$statistic
n <- length(rois)
full.model.pvals <- numeric(n)
full.model.stats <- numeric(n)
full.model.rsqds <- numeric(n)
collapsed.model.pvals <- numeric(n)
collapsed.model.stats <- numeric(n)
collapsed.model.rsqds <- numeric(n)
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(lm.with.licking.subtraction)
collapsed.model.pvals[i] <- full.model.test$p.value
collapsed.model.stats[i] <- full.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
collapsed.model<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(lm.with.licking.subtraction)
collapsed.model.pvals[i] <- full.model.test$p.value
collapsed.model.stats[i] <- full.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
collapsed.model.tests
collapsed.model.pvals
summary(collapsed.model.pvals)
hist(collapsed.model.pvals, breaks = 20)
hist(full.model.pvals, breaks = 20)
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
collapsed.model<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(lm.with.licking.subtraction)
collapsed.model.pvals[i] <- collapsed.model.test$p.value
collapsed.model.stats[i] <- collapsed.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
hist(collapsed.model.pvals, breaks = 20)
hist(collapsed.model.pvals)
collapsed.model.pvals
for (i in 1:n){
roi <- rois[[i]]
roidat <- dat[dat$ROI_ID==roi,]
outside_trials  <- roidat[roidat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = roidat)
roidat$residuals <- roidat$dF_on_F - licking.prediction
residual.dat <- roidat
residual.dat$dF_on_F <- roidat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
collapsed.model<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go + trial.segment:go:correct,
data = collapsed.after.licking.subtraction)
full.model <- lm(dF_on_F ~ as.factor(lick_factor) + as.factor(trial_factor) +
go:as.factor(trial_factor) + correct:as.factor(trial_factor),
data = roidat[roidat$trial_factor!=-999,])
full.model.test <- lmtest::dwtest(full.model,tol = 0)
full.model.pvals[i] <- full.model.test$p.value
full.model.stats[i] <- full.model.test$statistic
full.model.rsqds[i] <- summary(full.model)$adj.r.squared
collapsed.model.test<- lmtest::dwtest(collapsed.model)
collapsed.model.pvals[i] <- collapsed.model.test$p.value
collapsed.model.stats[i] <- collapsed.model.test$statistic
collapsed.model.rsqds[i] <- summary(collapsed.model)$adj.r.squared
}
hist(collapsed.model.pvals)
hist(collapsed.model.stats)
hist(full.model.stats)
summary(full.model)
plot(full.model$fitted.values)
summary(full.model$fitted.values)
summary(full.model)
anova(full.model)
collapsed.model.rsqds
hist(collapsed.model.rsqds)
hist(full.model.rsqds)
plot(collapsed.model)
plot(full.model)
