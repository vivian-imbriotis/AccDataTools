print("LICKING MODEL (SHOULD BE SIGNIFICANT):")
print(summary(licking.model))
print("SECOND ORDER LICKING MODEL (SHOULD BE INSIGNIFICANT):")
print(summary(snd.order.licking.model))
#Create a copy of dat to hold the residuals
residual.dat <- dat
residual.dat$dF_on_F <- dat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go,
data = collapsed.after.licking.subtraction)
#Was our second model better?
print("Model WITHOUT Licking Subtraction")
print(summary(lm.no.licking.subtraction))
print("\n\nModel WITH Licking Subtraction")
print(summary(lm.with.licking.subtraction))
dat <- read.csv("C:/Users/viviani/Desktop/test.csv")
source('~/subtract_licking_then_average.R')
rois <- unique(dat$ROI_ID)
source('~/subtract_licking_then_average.R')
traceback()
#We can't get an F-test off an anova because out models
#have the same number of degrees of freedom, but we
#can at least get the RSS.
print("ANOVA")
source('~/subtract_licking_then_average.R')
#We can't get an F-test off an anova because out models
#have the same number of degrees of freedom, but we
#can at least get the RSS.
cat("\n\nANOVA")
source('~/subtract_licking_then_average.R')
dat <- read.csv("C:/Users/viviani/Desktop/pupils_unrolled.csv")
str(dat)
unique(dat$trial_frame)
for (i in 1:4){
print(shapiro.test(dat$pupil_diameter[dat$trial_type==i]))
}
for (i in unique(dat$trial_type)){
print(shapiro.test(dat$pupil_diameter[dat$trial_type==i]))
}
for (i in unique(dat$trial_type)){
print(shapiro.test(dat$pupil_diameter[dat$trial_type==i]))
}
counts(dat$trial_type)
count(dat$trial_type)
unique(dat$trial_type)
for (i in unique(dat$trial_type)){
print(i)
print(shapiro.test(dat$pupil_diameter[dat$trial_type==i]))
}
sum(dat$trial_type=="hit")
for (i in unique(dat$trial_type)){
print(i)
qqnrom(dat$pupil_diameter[dat$trial_type==i])
}
for (i in unique(dat$trial_type)){
print(i)
qqnorm(dat$pupil_diameter[dat$trial_type==i])
}
source('~/.active-rstudio-document')
anova(fit)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
read.csv
source('~/.active-rstudio-document')
anova(fit)
fit
ks.test(dat$pupil_diameter[dat$trial_type=="hit"],)
ks.test(dat$pupil_diameter[dat$trial_type=="hit"],
dat$pupil_diameter[dat$trial_type=="miss"])
ks.test(dat$pupil_diameter[dat$trial_type=="hit"],
dat$pupil_diameter[dat$trial_type=="cr"])
source('~/.active-rstudio-document')
anova(fit)
fit
fit <- lme(pupil_diameter ~ trial_type | trial_frame, data=dat)
library(nlme)
fit <- lme(pupil_diameter ~ trial_type | trial_frame, data=dat)
dat <- read.csv("C:/Users/viviani/Desktop/pupils_unrolled.csv")
base_model <- lmer(pupil_diameter ~ trial_frame + (1|recording), data=dat)
library(lme4)
base_model <- lmer(pupil_diameter ~ trial_frame + (1|recording), data=dat)
trial_type_model <- lmer(pupil_diameter ~ trial_frame*trial_type + (1|recording),
data=dat)
anova(trial_type_model, base_model)
base_model       <- lmer(pupil_diameter ~ trial_frame + (1|recording),
data=dat, REML = FALSE)
trial_type_model <- lmer(pupil_diameter ~ trial_frame*trial_type + (1|recording),
data=dat, REML = FALSE)
anova(trial_type_model, base_model)
trial_type_model
summary(trial_type_model)
anova(trial_type_model, base_model)
trial_type_model
summary(trial_type_model)
mock_hit             <-data.frame()
mock_hit$trial_frame <- 0:25
mock_hit$trial_type  <- "hit"
mock_hit$recording   <- dat$recording[0]
predict(trial_type_model,
mock_hit,
re.form = NA)
prediction <- predict(trial_type_model,
mock_hit,
re.form = NA)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
prediction <- predict(trial_type_model,
mock_hit,
re.form = NA)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
recording[]   <- dat$recording[1]
source('~/.active-rstudio-document')
prediction
plot(prediction)
plot(prediction, "l")
plot(prediction, type="l")
predict(trial_type_mode,mock_hit,re.form=NA,se.fit=TRUE)
predict(trial_type_model,mock_hit,re.form=NA,se.fit=TRUE)
predict(trial_type_model,mock_hit,re.form=NA,se=TRUE)
prediction_hit <- predict(trial_type_model,
mock_hit,
re.form = NA)
source('~/.active-rstudio-document')
anova_of_models
summary(anova_of_models)
source('~/.active-rstudio-document')
install(lmerTest)
install.packages(lmerTest)
install.packages("lmerTest")
library(lmerTest)
anova_of_models
summary(base_model)
summary(base_model)
source('~/.active-rstudio-document')
anova_of_models
base_model       <- lmer(pupil_diameter ~ trial_frame + (1|recording),
data=dat)
source('~/.active-rstudio-document')
anova_of_models
summary(trial_type_model)
predict.interval
predict_interval
predictInterval
install.packages("merTools")
source('~/.active-rstudio-document')
install.packages("merTools")
source('~/.active-rstudio-document')
install.packages("acepack")
source('~/.active-rstudio-document')
prediction_hit
predictInterval(trial_type_model,mock_hit,level=0.5)
plot(predictInterval(trial_type_model,mock_hit,level=0.5))
matplot(predictInterval(trial_type_model,mock_hit,level=0.5))
matplot(predictInterval(trial_type_model,mock_hit,level=0.5),type=c("b"))
matplot(predictInterval(trial_type_model,mock_hit,level=0.5),type="l")
mock_miss <- mock_hit
mock_miss$tria_type <- "miss"
matplot(predictInterval(trial_type_model,mock_miss,level=0.5),type="l")
mock_miss
mock_miss$trial_type <- "miss"
matplot(predictInterval(trial_type_model,mock_miss,level=0.5),type="l")
source('~/.active-rstudio-document')
source('~/pupil_size_mixed_linear_model.R')
plot(prediction_hit)
anova_of_models
summary(trial_type_model)
anova(trial_type_model)
intervals_hit <- predictInterval(trial_type_model,
mock_hit,
which = "fixed",
level = 0.5,
n.sims=1000,
seed = seed)
seed <- 123456789
intervals_hit <- predictInterval(trial_type_model,
mock_hit,
which = "fixed",
level = 0.5,
n.sims=1000,
seed = seed)
mock_hit
intervals_hit
matplot(intervals_hit, type="l")
intervals_hit <- predictInterval(trial_type_model,
mock_hit,
which = "fixed",
level = 0.5,
n.sims=10000,
seed = seed)
matplot(intervals_hit, type="l")
type(intervals_hit)
class(intervals)hit
class(intervals_hit)
source('~/pupil_size_mixed_linear_model.R')
anova_of_models  <- anova(trial_type_model_sq,trial_type_model, base_model)
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
anova(base_model, base_model_parabola, trial_type_model,trial_type_model_parabola)
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
save_predictions_to_csv(trial_type_model_factor,"C:/Users/viviani/Desktop/pupilfactorpredictions.csv")
source('~/pupil_size_mixed_linear_model.R')
anova(base_model_factor,go_correct_model_factor)
anova(go_correct_model_factor)
source('~/pupil_size_mixed_linear_model.R')
anova(go_correct_model_factor)
anova(base_model_factor,go_correct_model_factor)
anova(go_correct_model_factor)
summary(go_correct_model_factor)
anova(go_correct_model_factor)
install.packages("emmeans")
source('~/pupil_size_mixed_linear_model.R')
var
var <- emmeans::emmeans(go_correct_model_factor,
pupil_diameter ~ as.factor(trial_frame)*go*correct - go*correct)
var
source('~/pupil_size_mixed_linear_model.R')
var <- emmeans::emmeans(go_correct_model_factor,
pairwise ~ as.factor(trial_frame)*go*correct - go*correct)
var
var <- emmeans::emeans(go_correct_model,
pairwise~trial_frame*go*correct - go*correct)
var <- emmeans::emmeans(go_correct_model,
pairwise~trial_frame*go*correct - go*correct)
var <- emmeans::emmeans(go_correct_model,
pairwise~trial_frame*go*correct - go*correct)
go_correct_model <- lmer(pupil_diameter ~ go*correct*trial_type - go*correct + (1|recording),
data=dat, REML=FALSE)
var <- emmeans::emmeans(go_correct_model,
pairwise~trial_frame*go*correct - go*correct)
go_correct_model
var <- emmeans::emmeans(go_correct_model_factor,
pairwise ~ as.factor(trial_frame)*go*correct - go*correct)
source(var)
summary(var)
correct_go_model
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
go_correct_model
str(dat)
source('~/pupil_size_mixed_linear_model.R')
var
var <- emmeans::emmeans(trial_type_model,
pairwise~trial_type*trial_frame - trial_frame,
lmerTest.limit = 101150)
var <- emmeans::emmeans(trial_type_model,
pairwise~trial_type*trial_frame - trial_frame,
lmerTest.limit = 101150,
pbkrtest.limit = 101120)
install.packages("pbkrtest")
var <- emmeans::emmeans(trial_type_model,
pairwise~trial_type*trial_frame - trial_frame,
lmerTest.limit = 101150,
pbkrtest.limit = 101120)
var <- emmeans::emmeans(trial_type_model,
pairwise~trial_type*trial_frame - trial_frame)
summary(var)
trial_type_model
a <- summary(var)
a
a$contrasts
a$contrasts$p.value
var <- emmeans::emmeans(trial_type_model,
pairwise~trial_type*trial_frame - trial_frame,
adjust = "none")
posthoc <- summary(var)$contrasts
posthoc$p.values <- p.adjust(posthoc$p.values, method = "bonferroni")
posthoc
posthoc$p.value
var <- emmeans::emmeans(trial_type_model,
pairwise~trial_type*trial_frame - trial_frame,
adjust = "none")
posthoc <- summary(var)$contrasts
posthoc$p.value <- p.adjust(posthoc$p.value, method = "bonferroni")
posthoc$p.value
posthoc
var <- emmeans::emmeans(go_correct_model_factor,
pairwise ~ go*correct)
var
var <- emmeans::emmeans(trial_type_model_factor,
pairwise ~ trial_type*trial_frame - trial_frame)
var
emmeans::contrast(emmeans::emmeans(trial_type_model_factor,
+pairwise ~ trial_type*trial_frame - trial_frame),"poly")
emmeans::contrast(emmeans::emmeans(trial_type_model_factor,
+pairwise ~ trial_type*trial_frame - trial_frame),"consec")
emmeans::joint_tests(trial_type_model)
emmeans::joint_tests(trial_type_model)
emmeans::joint_tests(emmeans::emmeans(trial_type_model_factor,
+                         +pairwise ~ trial_type*trial_frame - trial_frame))
emmeans::joint_tests(emmeans::emmeans(trial_type_model_factor,
+                         +pairwise ~ trial_type)
)
emmeans::emmeans(trial_type_model_factor,pairwise ~ trial_type)
go_correct_model
emmeans::emmeans(go_correct_model_factor,pairwise ~ go*correct)
emmeans::emmeans(go_correct_model_factor,pairwise ~ go)
emmeans::emmeans(go_correct_model_factor,pairwise ~ trial_frame)
emmeans::emmeans(trial_type_model_factor,pairwise ~ trial_type)
summary(emmeans::emmeans(trial_type_model_factor,pairwise ~ trial_type))
source('~/pupil_size_mixed_linear_model.R')
var
source('~/pupil_size_mixed_linear_model.R')
source('~/pupil_size_mixed_linear_model.R')
var <- emmeans::emtrends(trial_type_model, pairwise ~ group, var = "t", )
posthoc <- summary(var)$contrasts
posthoc$p.value <- p.adjust(posthoc$p.value, method = "bonferroni")
var <- emmeans::emtrends(trial_type_model, pairwise ~ group, var = "trial_frame", )
posthoc <- summary(var)$contrasts
posthoc$p.value <- p.adjust(posthoc$p.value, method = "bonferroni")
var <- emmeans::emtrends(trial_type_model, pairwise ~ group, var = "trial_frame")
var <- emmeans::emtrends(trial_type_model, pairwise ~ trial_type, var = "trial_frame")
posthoc <- summary(var)$contrasts
posthoc$p.value <- p.adjust(posthoc$p.value, method = "bonferroni")
posthoc
base_model       <- lmer(pupil_diameter ~ trial_frame + (1|recording),
data=dat, REML=FALSE)
trial_type_model    <- lmer(pupil_diameter ~ trial_frame*trial_type + (1|recording),
data=dat, REML=FALSE)
print(anova(base_model,trial_type_model))
var <- emmeans::emtrends(trial_type_model, pairwise ~ trial_type, var = "trial_frame")
posthoc <- summary(var)$contrasts
print("\n\n")
print(posthoc)
source('~/pupil_size_mixed_linear_model.R')
licence()
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
source("get_mode_pval.R")
source("get_model_pval.R")
source("~/get_model_pval.R")
source("~/get_model_pval.R")
source("~/get_model_pval.R")
source("~/get_model_pval.R")
"~"
source("get_model_pval.R")
source("get_model_pval.r")
source("./get_model_pval.r")
getwd()
cwd
setwd("C:\\Users\\viviani\\AppData\\Roaming\\Python\\Python37\\site-packages\\accdatatools")
source("./get_model_pval.r")
source("get_model_pval.r")
getwd()
list.files()
setwd("RScripts")
source("get_model_pval.r")
setwd("..")
source("get_model_pval.r", chdir = TRUE)
setwd("RScripts")
source("get_model_pval.r", chdir = TRUE)
for(i in 1:length(rois)){
roi <- rois[i]
subset <- dat[dat$ROI_ID==roi]
outside_trials        <- dat[dat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = dat)
dat$residuals <- dat$dF_on_F - licking.prediction
residual.dat <- dat
residual.dat$dF_on_F <- dat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go,
data = collapsed.after.licking.subtraction)
summary_objects[[i]] <- lm.with.licking.subtraction
}
dat <- read.csv("C:/Users/viviani/Desktop/test.csv")
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
subset <- dat[dat$ROI_ID==roi,]
for(i in 1:length(rois)){
roi <- rois[i]
subset <- dat[dat$ROI_ID==roi,]
outside_trials        <- dat[dat$trial_factor== -999,]
licking.model <- lm(dF_on_F ~ lick_factor,
data = outside_trials)
if(get_lm_pvalue(licking.model)>0.05){
licking_insignificant = licking_insignificant + 1
licking_model <- lm(dF_on_F ~ 1, data = outside_trials)
}
licking.prediction <- predict(licking.model, newdata = dat)
dat$residuals <- dat$dF_on_F - licking.prediction
residual.dat <- dat
residual.dat$dF_on_F <- dat$dF_on_F - licking.prediction
collapsed.after.licking.subtraction <- collapse.across.time(residual.dat)
lm.with.licking.subtraction<- lm(mean.dF ~ trial.segment + trial.segment:correct
+trial.segment:go,
data = collapsed.after.licking.subtraction)
summary_objects[[i]] <- summary(lm.with.licking.subtraction)
model_pvals[[i]] <- get_lm_pvalue(lm.with.licking.subtraction)
}
warnings()
model_pvals
summary_objects
summary_objects[[1]]$adj.r.squared
attributes(summary_objects[[1]])
lapply(summary_objects, function(x) x$adj.r.squared)
summary(lapply(summary_objects, function(x) x$adj.r.squared))
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
model_pvals
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
pvals
model_pvals
model_pvals<0.05
model_pvals <- p.adjust(model_pvals, method = "fdr")
model_pvals<0.05
coeffs
coeffs[[1]]
coeffs[model_pvals<0.05]
summary(coeffs[model_pvals<0.05])
do.call(rbind, coeffs)
summary(do.call(rbind, coeffs))
data.frame(do.call(rbind, coeffs))
summary(data.frame(do.call(rbind, coeffs)))
str(data.frame(do.call(rbind, coeffs)))
str(data.frame(do.call(rbind, lapply(coeffs,function(x) x$Estimate)))
)
coeffs[0]
coeffs[1]
coeffs[1]$Estimate
class(coeffs[[1]])
coeffs[[1]][,Estimate]
coeffs[[1]][,"Estimate"]
str(data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))
)
estimates <- (data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))
)
summary(estimates)
coeffs[[1]]
rsquareds       <- lapply(summary_objects, function(x) x$adj.r.squared)
coeffs          <- lapply(summary_objects, function(x) x$coefficients)
coeff_estimates <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Estimate"])))
coeff_pvals     <- data.frame(do.call(rbind, lapply(coeffs,function(x) x[,"Pr(>|t|)"])))
coeff_pvals
summary(coeff_estimates)
summary(coeff_pvals)
estimates
summary(estimates)
subset$residuals <- subset$dF_on_F - licking.prediction
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
warnings()
coeff_pvals
summary(coeff_pvals<0.05)
source('C:/Users/viviani/AppData/Roaming/Python/Python37/site-packages/accdatatools/RScripts/subtract_licking_then_average.R')
anovas
anovas[[1]]
anovas[[1]]$`Pr(>F)`
rbind(lapply(annvas,function(x) x$`Pr(>F)`))
rbind(lapply(anovas,function(x) x$`Pr(>F)`))
data.frame(rbind(lapply(anovas,function(x) x$`Pr(>F)`)))
str(data.frame(rbind(lapply(anovas,function(x) x$`Pr(>F)`))))
str(data.frame(rbind(apply(anovas,function(x) x$`Pr(>F)`))))
str(data.frame(rbind(apply(anovas,FUN=function(x) x$`Pr(>F)`))))
str(data.frame(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
data.frame(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`)))
data.frame(transpose(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))<0.05
summary(data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))<0.05)
a <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))<0.05
anovas[[1]]
row.names(anovas[[1]])
columns(a) <- row.names(anovas[[1]])
colnames(a) <- row.names(anovas[[1]])
a
summary(a)
summary(a[a$trial.segment:correct])
a
class(a)
data.frame(a)
class(data.frame(a))
a <- data.frame(a)
summary(a[a$trial.segment:correct])
summary(a[a$`trial.segment:correct``])
`)`
summary(a[a$`trial.segment:correct`])
summary(a[a$`trial.segment:correct`==T])
(a[a$`trial.segment:correct`==T])
(a[a$`trial.segment:correct`==T,])
anova_frame <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
colnames(anova_frame) <- row.names(anovas[[1]])
anova_frame
class(anova_frame)
anova_frame[anova_frame$`trial.segment:correct`==True,
]
anova_frame[anova_frame$`trial.segment:correct`==TRUE,]
anova_frame[anova_frame$`trial.segment:correct`,]
anova_frame[anova_frame$`trial.segment:go`,]
anova_frame
summary(anova_frame)
anova_frame <- anova_frame < 0.05
anova_frame
anova_frame <- data.frame(t(rbind(sapply(anovas,FUN=function(x) x$`Pr(>F)`))))
colnames(anova_frame) <- row.names(anovas[[1]])
summary(anova_frame[anova_frame$`trial.segment:go`<0.05]<0.05)
summary(anova_frame[anova_frame$`trial.segment:go`<0.05,]<0.05)
anova_frame[anova_frame$`trial.segment:go`<0.05 & anova_frame$`trial.segment:correct`<0.05,]
row.names(anova_frame[anova_frame$`trial.segment:go`<0.05 & anova_frame$`trial.segment:correct`<0.05,])
get_lm_pvalue(lm.with.licking.subtraction)
source('C:/Users/Vivian Imbriotis/Anaconda3/Lib/site-packages/accdatatools/RScripts/compare_modelling_approaches.R')
